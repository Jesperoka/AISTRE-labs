<?xml version="1.0" encoding="UTF-8"?>
<testsuite xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="https://maven.apache.org/surefire/maven-surefire-plugin/xsd/surefire-test-report-3.0.xsd" version="3.0" name="nl.tudelft.instrumentation.fuzzing.DistanceVisitorTest" time="0.08" tests="14" errors="0" skipped="0" failures="0">
  <properties>
    <property name="java.specification.version" value="17"/>
    <property name="sun.cpu.isalist" value="amd64"/>
    <property name="sun.jnu.encoding" value="Cp1252"/>
    <property name="java.class.path" value="C:\Users\cashe\Desktop\UNI\1_Master\AIforTestingLab\AISTRE-labs\target\test-classes;C:\Users\cashe\Desktop\UNI\1_Master\AIforTestingLab\AISTRE-labs\target\classes;C:\Users\cashe\.m2\repository\com\github\javaparser\javaparser-core\3.18.0\javaparser-core-3.18.0.jar;C:\Users\cashe\.m2\repository\com\google\guava\guava\30.1-jre\guava-30.1-jre.jar;C:\Users\cashe\.m2\repository\com\google\guava\failureaccess\1.0.1\failureaccess-1.0.1.jar;C:\Users\cashe\.m2\repository\com\google\guava\listenablefuture\9999.0-empty-to-avoid-conflict-with-guava\listenablefuture-9999.0-empty-to-avoid-conflict-with-guava.jar;C:\Users\cashe\.m2\repository\com\google\code\findbugs\jsr305\3.0.2\jsr305-3.0.2.jar;C:\Users\cashe\.m2\repository\org\checkerframework\checker-qual\3.5.0\checker-qual-3.5.0.jar;C:\Users\cashe\.m2\repository\com\google\errorprone\error_prone_annotations\2.3.4\error_prone_annotations-2.3.4.jar;C:\Users\cashe\.m2\repository\com\google\j2objc\j2objc-annotations\1.3\j2objc-annotations-1.3.jar;C:\Users\cashe\.m2\repository\org\apache\commons\commons-lang3\3.11\commons-lang3-3.11.jar;C:\Users\cashe\.m2\repository\com\google\code\gson\gson\2.8.6\gson-2.8.6.jar;C:\Users\cashe\.m2\repository\org\junit\jupiter\junit-jupiter-api\5.7.0\junit-jupiter-api-5.7.0.jar;C:\Users\cashe\.m2\repository\org\apiguardian\apiguardian-api\1.1.0\apiguardian-api-1.1.0.jar;C:\Users\cashe\.m2\repository\org\opentest4j\opentest4j\1.2.0\opentest4j-1.2.0.jar;C:\Users\cashe\.m2\repository\org\junit\platform\junit-platform-commons\1.7.0\junit-platform-commons-1.7.0.jar;C:\Users\cashe\.m2\repository\commons-cli\commons-cli\1.4\commons-cli-1.4.jar;C:\Users\cashe\Desktop\UNI\1_Master\AIforTestingLab\AISTRE-labs\lib\com.microsoft.z3.jar;"/>
    <property name="java.vm.vendor" value="Oracle Corporation"/>
    <property name="sun.arch.data.model" value="64"/>
    <property name="user.variant" value=""/>
    <property name="java.vendor.url" value="https://java.oracle.com/"/>
    <property name="user.timezone" value="Europe/Amsterdam"/>
    <property name="user.country.format" value="NL"/>
    <property name="os.name" value="Windows 10"/>
    <property name="java.vm.specification.version" value="17"/>
    <property name="sun.java.launcher" value="SUN_STANDARD"/>
    <property name="user.country" value="GB"/>
    <property name="sun.boot.library.path" value="C:\Program Files\Java\jdk-17.0.2\bin"/>
    <property name="sun.java.command" value="C:\Users\cashe\AppData\Local\Temp\surefire13213765370605797529\surefirebooter-20230220110841996_3.jar C:\Users\cashe\AppData\Local\Temp\surefire13213765370605797529 2023-02-20T11-08-41_793-jvmRun1 surefire-20230220110841996_1tmp surefire_0-20230220110841996_2tmp"/>
    <property name="jdk.debug" value="release"/>
    <property name="surefire.test.class.path" value="C:\Users\cashe\Desktop\UNI\1_Master\AIforTestingLab\AISTRE-labs\target\test-classes;C:\Users\cashe\Desktop\UNI\1_Master\AIforTestingLab\AISTRE-labs\target\classes;C:\Users\cashe\.m2\repository\com\github\javaparser\javaparser-core\3.18.0\javaparser-core-3.18.0.jar;C:\Users\cashe\.m2\repository\com\google\guava\guava\30.1-jre\guava-30.1-jre.jar;C:\Users\cashe\.m2\repository\com\google\guava\failureaccess\1.0.1\failureaccess-1.0.1.jar;C:\Users\cashe\.m2\repository\com\google\guava\listenablefuture\9999.0-empty-to-avoid-conflict-with-guava\listenablefuture-9999.0-empty-to-avoid-conflict-with-guava.jar;C:\Users\cashe\.m2\repository\com\google\code\findbugs\jsr305\3.0.2\jsr305-3.0.2.jar;C:\Users\cashe\.m2\repository\org\checkerframework\checker-qual\3.5.0\checker-qual-3.5.0.jar;C:\Users\cashe\.m2\repository\com\google\errorprone\error_prone_annotations\2.3.4\error_prone_annotations-2.3.4.jar;C:\Users\cashe\.m2\repository\com\google\j2objc\j2objc-annotations\1.3\j2objc-annotations-1.3.jar;C:\Users\cashe\.m2\repository\org\apache\commons\commons-lang3\3.11\commons-lang3-3.11.jar;C:\Users\cashe\.m2\repository\com\google\code\gson\gson\2.8.6\gson-2.8.6.jar;C:\Users\cashe\.m2\repository\org\junit\jupiter\junit-jupiter-api\5.7.0\junit-jupiter-api-5.7.0.jar;C:\Users\cashe\.m2\repository\org\apiguardian\apiguardian-api\1.1.0\apiguardian-api-1.1.0.jar;C:\Users\cashe\.m2\repository\org\opentest4j\opentest4j\1.2.0\opentest4j-1.2.0.jar;C:\Users\cashe\.m2\repository\org\junit\platform\junit-platform-commons\1.7.0\junit-platform-commons-1.7.0.jar;C:\Users\cashe\.m2\repository\commons-cli\commons-cli\1.4\commons-cli-1.4.jar;C:\Users\cashe\Desktop\UNI\1_Master\AIforTestingLab\AISTRE-labs\lib\com.microsoft.z3.jar;"/>
    <property name="sun.cpu.endian" value="little"/>
    <property name="user.home" value="C:\Users\cashe"/>
    <property name="user.language" value="en"/>
    <property name="java.specification.vendor" value="Oracle Corporation"/>
    <property name="java.version.date" value="2022-01-18"/>
    <property name="java.home" value="C:\Program Files\Java\jdk-17.0.2"/>
    <property name="file.separator" value="\"/>
    <property name="basedir" value="C:\Users\cashe\Desktop\UNI\1_Master\AIforTestingLab\AISTRE-labs"/>
    <property name="java.vm.compressedOopsMode" value="Zero based"/>
    <property name="line.separator" value="&#10;"/>
    <property name="java.vm.specification.vendor" value="Oracle Corporation"/>
    <property name="java.specification.name" value="Java Platform API Specification"/>
    <property name="surefire.real.class.path" value="C:\Users\cashe\AppData\Local\Temp\surefire13213765370605797529\surefirebooter-20230220110841996_3.jar"/>
    <property name="user.script" value=""/>
    <property name="sun.management.compiler" value="HotSpot 64-Bit Tiered Compilers"/>
    <property name="java.runtime.version" value="17.0.2+8-LTS-86"/>
    <property name="user.name" value="cashe"/>
    <property name="path.separator" value=";"/>
    <property name="os.version" value="10.0"/>
    <property name="java.runtime.name" value="Java(TM) SE Runtime Environment"/>
    <property name="file.encoding" value="Cp1252"/>
    <property name="java.vm.name" value="Java HotSpot(TM) 64-Bit Server VM"/>
    <property name="localRepository" value="C:\Users\cashe\.m2\repository"/>
    <property name="java.vendor.url.bug" value="https://bugreport.java.com/bugreport/"/>
    <property name="java.io.tmpdir" value="C:\Users\cashe\AppData\Local\Temp\"/>
    <property name="java.version" value="17.0.2"/>
    <property name="user.dir" value="C:\Users\cashe\Desktop\UNI\1_Master\AIforTestingLab\AISTRE-labs"/>
    <property name="os.arch" value="amd64"/>
    <property name="java.vm.specification.name" value="Java Virtual Machine Specification"/>
    <property name="sun.os.patch.level" value=""/>
    <property name="native.encoding" value="Cp1252"/>
    <property name="java.library.path" value="C:\Program Files\Java\jdk-17.0.2\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;C:\Program Files\Common Files\Oracle\Java\javapath;C:\Program Files (x86)\Common Files\Oracle\Java\javapath;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Windows\System32\OpenSSH\;C:\Program Files (x86)\NVIDIA Corporation\PhysX\Common;C:\Program Files\dotnet\;C:\Program Files\NVIDIA Corporation\NVIDIA NvDLISR;C:\Program Files\nodejs\;C:\Program Files\Git\cmd;C:\Program Files\Docker\Docker\resources\bin;C:\Program Files\apache-maven-3.9.0\bin;C:\Users\cashe\AppData\Local\Microsoft\WindowsApps;C:\Users\cashe\AppData\Roaming\npm;C:\Users\cashe\AppData\Local\Programs\Microsoft VS Code\bin;C:\Users\cashe\AppData\Local\Programs\MiKTeX\miktex\bin\x64\;."/>
    <property name="java.vm.info" value="mixed mode, sharing"/>
    <property name="java.vendor" value="Oracle Corporation"/>
    <property name="java.vm.version" value="17.0.2+8-LTS-86"/>
    <property name="sun.io.unicode.encoding" value="UnicodeLittle"/>
    <property name="java.class.version" value="61.0"/>
  </properties>
  <testcase name="testSimpleIfShouldCreateOneBinaryExpression" classname="nl.tudelft.instrumentation.fuzzing.DistanceVisitorTest" time="0.015">
    <system-out><![CDATA[public class Test {

    public static void main(String[] args) {
        if (a <= 0)
            return "INVALID";
    }
}

import nl.tudelft.instrumentation.fuzzing.*;
import nl.tudelft.instrumentation.runner.CallableTraceRunner;

public class Test implements CallableTraceRunner<Void> {

    public static void main(String[] args) {
        DistanceTracker.myIf(DistanceTracker.binaryExpr(DistanceTracker.MyVar(a), DistanceTracker.MyVar(0), "<="), a <= 0, 3);
        if (a <= 0)
            return "INVALID";
    }

    public String[] sequence;

    public Void call() {
        Test cp = new Test();
        for (String s : sequence) {
            try {
                cp.calculateOutput(s);
            } catch (Exception e) {
                FuzzingLab.output("Invalid input: " + e.getMessage());
            }
        }
        return null;
    }

    public void setSequence(String[] trace) {
        sequence = trace;
    }
}

]]></system-out>
  </testcase>
  <testcase name="testInstrumentationShouldCreateSequenceAttribute" classname="nl.tudelft.instrumentation.fuzzing.DistanceVisitorTest" time="0.006">
    <system-out><![CDATA[public class Test {

    public static void main(String[] args) {
        if (a.equals(b) && a.equals(b) && a.equals(b) && a.equals(b))
            return "INVALID";
    }
}

import nl.tudelft.instrumentation.fuzzing.*;
import nl.tudelft.instrumentation.runner.CallableTraceRunner;

public class Test implements CallableTraceRunner<Void> {

    public static void main(String[] args) {
        DistanceTracker.myIf(DistanceTracker.binaryExpr(DistanceTracker.binaryExpr(DistanceTracker.binaryExpr(DistanceTracker.equals(DistanceTracker.MyVar(b), DistanceTracker.MyVar(a)), DistanceTracker.equals(DistanceTracker.MyVar(b), DistanceTracker.MyVar(a)), "&&"), DistanceTracker.equals(DistanceTracker.MyVar(b), DistanceTracker.MyVar(a)), "&&"), DistanceTracker.equals(DistanceTracker.MyVar(b), DistanceTracker.MyVar(a)), "&&"), a.equals(b) && a.equals(b) && a.equals(b) && a.equals(b), 3);
        if (a.equals(b) && a.equals(b) && a.equals(b) && a.equals(b))
            return "INVALID";
    }

    public String[] sequence;

    public Void call() {
        Test cp = new Test();
        for (String s : sequence) {
            try {
                cp.calculateOutput(s);
            } catch (Exception e) {
                FuzzingLab.output("Invalid input: " + e.getMessage());
            }
        }
        return null;
    }

    public void setSequence(String[] trace) {
        sequence = trace;
    }
}

]]></system-out>
  </testcase>
  <testcase name="testInstrumentationShouldAddImportForCallable" classname="nl.tudelft.instrumentation.fuzzing.DistanceVisitorTest" time="0.006">
    <system-out><![CDATA[public class Test {

    public static void main(String[] args) {
        if (a.equals(b) && a.equals(b) && a.equals(b) && a.equals(b))
            return "INVALID";
    }
}

import nl.tudelft.instrumentation.fuzzing.*;
import nl.tudelft.instrumentation.runner.CallableTraceRunner;

public class Test implements CallableTraceRunner<Void> {

    public static void main(String[] args) {
        DistanceTracker.myIf(DistanceTracker.binaryExpr(DistanceTracker.binaryExpr(DistanceTracker.binaryExpr(DistanceTracker.equals(DistanceTracker.MyVar(b), DistanceTracker.MyVar(a)), DistanceTracker.equals(DistanceTracker.MyVar(b), DistanceTracker.MyVar(a)), "&&"), DistanceTracker.equals(DistanceTracker.MyVar(b), DistanceTracker.MyVar(a)), "&&"), DistanceTracker.equals(DistanceTracker.MyVar(b), DistanceTracker.MyVar(a)), "&&"), a.equals(b) && a.equals(b) && a.equals(b) && a.equals(b), 3);
        if (a.equals(b) && a.equals(b) && a.equals(b) && a.equals(b))
            return "INVALID";
    }

    public String[] sequence;

    public Void call() {
        Test cp = new Test();
        for (String s : sequence) {
            try {
                cp.calculateOutput(s);
            } catch (Exception e) {
                FuzzingLab.output("Invalid input: " + e.getMessage());
            }
        }
        return null;
    }

    public void setSequence(String[] trace) {
        sequence = trace;
    }
}

]]></system-out>
  </testcase>
  <testcase name="testSimpleIfShouldCreateOneMyIfMethodCall" classname="nl.tudelft.instrumentation.fuzzing.DistanceVisitorTest" time="0.006">
    <system-out><![CDATA[public class Test {

    public static void main(String[] args) {
        if (a <= 0)
            return "INVALID";
    }
}

import nl.tudelft.instrumentation.fuzzing.*;
import nl.tudelft.instrumentation.runner.CallableTraceRunner;

public class Test implements CallableTraceRunner<Void> {

    public static void main(String[] args) {
        DistanceTracker.myIf(DistanceTracker.binaryExpr(DistanceTracker.MyVar(a), DistanceTracker.MyVar(0), "<="), a <= 0, 3);
        if (a <= 0)
            return "INVALID";
    }

    public String[] sequence;

    public Void call() {
        Test cp = new Test();
        for (String s : sequence) {
            try {
                cp.calculateOutput(s);
            } catch (Exception e) {
                FuzzingLab.output("Invalid input: " + e.getMessage());
            }
        }
        return null;
    }

    public void setSequence(String[] trace) {
        sequence = trace;
    }
}

]]></system-out>
  </testcase>
  <testcase name="testManyComparisonsInIfCreatesManyBinaryExpressions" classname="nl.tudelft.instrumentation.fuzzing.DistanceVisitorTest" time="0.004">
    <system-out><![CDATA[public class Test {

    public static void main(String[] args) {
        if (a.equals(b) && a.equals(b) && a.equals(b) && a.equals(b))
            return "INVALID";
    }
}

import nl.tudelft.instrumentation.fuzzing.*;
import nl.tudelft.instrumentation.runner.CallableTraceRunner;

public class Test implements CallableTraceRunner<Void> {

    public static void main(String[] args) {
        DistanceTracker.myIf(DistanceTracker.binaryExpr(DistanceTracker.binaryExpr(DistanceTracker.binaryExpr(DistanceTracker.equals(DistanceTracker.MyVar(b), DistanceTracker.MyVar(a)), DistanceTracker.equals(DistanceTracker.MyVar(b), DistanceTracker.MyVar(a)), "&&"), DistanceTracker.equals(DistanceTracker.MyVar(b), DistanceTracker.MyVar(a)), "&&"), DistanceTracker.equals(DistanceTracker.MyVar(b), DistanceTracker.MyVar(a)), "&&"), a.equals(b) && a.equals(b) && a.equals(b) && a.equals(b), 3);
        if (a.equals(b) && a.equals(b) && a.equals(b) && a.equals(b))
            return "INVALID";
    }

    public String[] sequence;

    public Void call() {
        Test cp = new Test();
        for (String s : sequence) {
            try {
                cp.calculateOutput(s);
            } catch (Exception e) {
                FuzzingLab.output("Invalid input: " + e.getMessage());
            }
        }
        return null;
    }

    public void setSequence(String[] trace) {
        sequence = trace;
    }
}

]]></system-out>
  </testcase>
  <testcase name="testInstrumentationShouldCreateRunCall" classname="nl.tudelft.instrumentation.fuzzing.DistanceVisitorTest" time="0.004">
    <system-out><![CDATA[public class Test {

    public static void main(String[] args) {
        Test eca = new Test();
    }
}

import nl.tudelft.instrumentation.fuzzing.*;
import nl.tudelft.instrumentation.runner.CallableTraceRunner;

public class Test implements CallableTraceRunner<Void> {

    public static void main(String[] args) {
        Test eca = new Test();
        DistanceTracker.run(eca.inputs, eca);
    }

    public String[] sequence;

    public Void call() {
        Test cp = new Test();
        for (String s : sequence) {
            try {
                cp.calculateOutput(s);
            } catch (Exception e) {
                FuzzingLab.output("Invalid input: " + e.getMessage());
            }
        }
        return null;
    }

    public void setSequence(String[] trace) {
        sequence = trace;
    }
}

]]></system-out>
  </testcase>
  <testcase name="testEqualsShouldConvertToMyVarEquals" classname="nl.tudelft.instrumentation.fuzzing.DistanceVisitorTest" time="0.005">
    <system-out><![CDATA[public class Test {

    public static void main(String[] args) {
        if (a.equals(b))
            return "INVALID";
    }
}

import nl.tudelft.instrumentation.fuzzing.*;
import nl.tudelft.instrumentation.runner.CallableTraceRunner;

public class Test implements CallableTraceRunner<Void> {

    public static void main(String[] args) {
        DistanceTracker.myIf(DistanceTracker.equals(DistanceTracker.MyVar(b), DistanceTracker.MyVar(a)), a.equals(b), 3);
        if (a.equals(b))
            return "INVALID";
    }

    public String[] sequence;

    public Void call() {
        Test cp = new Test();
        for (String s : sequence) {
            try {
                cp.calculateOutput(s);
            } catch (Exception e) {
                FuzzingLab.output("Invalid input: " + e.getMessage());
            }
        }
        return null;
    }

    public void setSequence(String[] trace) {
        sequence = trace;
    }
}

]]></system-out>
  </testcase>
  <testcase name="testNestedIfShouldCreateTwoMyIfCalls" classname="nl.tudelft.instrumentation.fuzzing.DistanceVisitorTest" time="0.005">
    <system-out><![CDATA[public class Test {

    public static void main(String[] args) {
        if (a <= 0) {
            if (a <= 0)
                return "INVALID";
        }
    }
}

import nl.tudelft.instrumentation.fuzzing.*;
import nl.tudelft.instrumentation.runner.CallableTraceRunner;

public class Test implements CallableTraceRunner<Void> {

    public static void main(String[] args) {
        DistanceTracker.myIf(DistanceTracker.binaryExpr(DistanceTracker.MyVar(a), DistanceTracker.MyVar(0), "<="), a <= 0, 3);
        if (a <= 0) {
            DistanceTracker.myIf(DistanceTracker.binaryExpr(DistanceTracker.MyVar(a), DistanceTracker.MyVar(0), "<="), a <= 0, 4);
            if (a <= 0)
                return "INVALID";
        }
    }

    public String[] sequence;

    public Void call() {
        Test cp = new Test();
        for (String s : sequence) {
            try {
                cp.calculateOutput(s);
            } catch (Exception e) {
                FuzzingLab.output("Invalid input: " + e.getMessage());
            }
        }
        return null;
    }

    public void setSequence(String[] trace) {
        sequence = trace;
    }
}

]]></system-out>
  </testcase>
  <testcase name="testInstrumentationShouldCreateSetSequenceMethod" classname="nl.tudelft.instrumentation.fuzzing.DistanceVisitorTest" time="0.007">
    <system-out><![CDATA[public class Test {

    public static void main(String[] args) {
        if (a.equals(b) && a.equals(b) && a.equals(b) && a.equals(b))
            return "INVALID";
    }
}

import nl.tudelft.instrumentation.fuzzing.*;
import nl.tudelft.instrumentation.runner.CallableTraceRunner;

public class Test implements CallableTraceRunner<Void> {

    public static void main(String[] args) {
        DistanceTracker.myIf(DistanceTracker.binaryExpr(DistanceTracker.binaryExpr(DistanceTracker.binaryExpr(DistanceTracker.equals(DistanceTracker.MyVar(b), DistanceTracker.MyVar(a)), DistanceTracker.equals(DistanceTracker.MyVar(b), DistanceTracker.MyVar(a)), "&&"), DistanceTracker.equals(DistanceTracker.MyVar(b), DistanceTracker.MyVar(a)), "&&"), DistanceTracker.equals(DistanceTracker.MyVar(b), DistanceTracker.MyVar(a)), "&&"), a.equals(b) && a.equals(b) && a.equals(b) && a.equals(b), 3);
        if (a.equals(b) && a.equals(b) && a.equals(b) && a.equals(b))
            return "INVALID";
    }

    public String[] sequence;

    public Void call() {
        Test cp = new Test();
        for (String s : sequence) {
            try {
                cp.calculateOutput(s);
            } catch (Exception e) {
                FuzzingLab.output("Invalid input: " + e.getMessage());
            }
        }
        return null;
    }

    public void setSequence(String[] trace) {
        sequence = trace;
    }
}

]]></system-out>
  </testcase>
  <testcase name="testSimpleIfShouldCreateOneUnaryExpression" classname="nl.tudelft.instrumentation.fuzzing.DistanceVisitorTest" time="0.004">
    <system-out><![CDATA[public class Test {

    public static void main(String[] args) {
        if (!a)
            return "INVALID";
    }
}

import nl.tudelft.instrumentation.fuzzing.*;
import nl.tudelft.instrumentation.runner.CallableTraceRunner;

public class Test implements CallableTraceRunner<Void> {

    public static void main(String[] args) {
        DistanceTracker.myIf(DistanceTracker.unaryExpr(DistanceTracker.MyVar(a), "!"), !a, 3);
        if (!a)
            return "INVALID";
    }

    public String[] sequence;

    public Void call() {
        Test cp = new Test();
        for (String s : sequence) {
            try {
                cp.calculateOutput(s);
            } catch (Exception e) {
                FuzzingLab.output("Invalid input: " + e.getMessage());
            }
        }
        return null;
    }

    public void setSequence(String[] trace) {
        sequence = trace;
    }
}

]]></system-out>
  </testcase>
  <testcase name="testInstrumentationShouldCreateCallMethod" classname="nl.tudelft.instrumentation.fuzzing.DistanceVisitorTest" time="0.004">
    <system-out><![CDATA[public class Test {

    public static void main(String[] args) {
        if (a.equals(b) && a.equals(b) && a.equals(b) && a.equals(b))
            return "INVALID";
    }
}

import nl.tudelft.instrumentation.fuzzing.*;
import nl.tudelft.instrumentation.runner.CallableTraceRunner;

public class Test implements CallableTraceRunner<Void> {

    public static void main(String[] args) {
        DistanceTracker.myIf(DistanceTracker.binaryExpr(DistanceTracker.binaryExpr(DistanceTracker.binaryExpr(DistanceTracker.equals(DistanceTracker.MyVar(b), DistanceTracker.MyVar(a)), DistanceTracker.equals(DistanceTracker.MyVar(b), DistanceTracker.MyVar(a)), "&&"), DistanceTracker.equals(DistanceTracker.MyVar(b), DistanceTracker.MyVar(a)), "&&"), DistanceTracker.equals(DistanceTracker.MyVar(b), DistanceTracker.MyVar(a)), "&&"), a.equals(b) && a.equals(b) && a.equals(b) && a.equals(b), 3);
        if (a.equals(b) && a.equals(b) && a.equals(b) && a.equals(b))
            return "INVALID";
    }

    public String[] sequence;

    public Void call() {
        Test cp = new Test();
        for (String s : sequence) {
            try {
                cp.calculateOutput(s);
            } catch (Exception e) {
                FuzzingLab.output("Invalid input: " + e.getMessage());
            }
        }
        return null;
    }

    public void setSequence(String[] trace) {
        sequence = trace;
    }
}

]]></system-out>
  </testcase>
  <testcase name="testInstrumentationShouldAddImport" classname="nl.tudelft.instrumentation.fuzzing.DistanceVisitorTest" time="0.003">
    <system-out><![CDATA[public class Test {

    public static void main(String[] args) {
        if (a.equals(b))
            return "INVALID";
    }
}

import nl.tudelft.instrumentation.fuzzing.*;
import nl.tudelft.instrumentation.runner.CallableTraceRunner;

public class Test implements CallableTraceRunner<Void> {

    public static void main(String[] args) {
        DistanceTracker.myIf(DistanceTracker.equals(DistanceTracker.MyVar(b), DistanceTracker.MyVar(a)), a.equals(b), 3);
        if (a.equals(b))
            return "INVALID";
    }

    public String[] sequence;

    public Void call() {
        Test cp = new Test();
        for (String s : sequence) {
            try {
                cp.calculateOutput(s);
            } catch (Exception e) {
                FuzzingLab.output("Invalid input: " + e.getMessage());
            }
        }
        return null;
    }

    public void setSequence(String[] trace) {
        sequence = trace;
    }
}

]]></system-out>
  </testcase>
  <testcase name="testInstrumentationShouldAddImplementToClass" classname="nl.tudelft.instrumentation.fuzzing.DistanceVisitorTest" time="0.004">
    <system-out><![CDATA[public class Test {

    public static void main(String[] args) {
        if (a.equals(b) && a.equals(b) && a.equals(b) && a.equals(b))
            return "INVALID";
    }
}

import nl.tudelft.instrumentation.fuzzing.*;
import nl.tudelft.instrumentation.runner.CallableTraceRunner;

public class Test implements CallableTraceRunner<Void> {

    public static void main(String[] args) {
        DistanceTracker.myIf(DistanceTracker.binaryExpr(DistanceTracker.binaryExpr(DistanceTracker.binaryExpr(DistanceTracker.equals(DistanceTracker.MyVar(b), DistanceTracker.MyVar(a)), DistanceTracker.equals(DistanceTracker.MyVar(b), DistanceTracker.MyVar(a)), "&&"), DistanceTracker.equals(DistanceTracker.MyVar(b), DistanceTracker.MyVar(a)), "&&"), DistanceTracker.equals(DistanceTracker.MyVar(b), DistanceTracker.MyVar(a)), "&&"), a.equals(b) && a.equals(b) && a.equals(b) && a.equals(b), 3);
        if (a.equals(b) && a.equals(b) && a.equals(b) && a.equals(b))
            return "INVALID";
    }

    public String[] sequence;

    public Void call() {
        Test cp = new Test();
        for (String s : sequence) {
            try {
                cp.calculateOutput(s);
            } catch (Exception e) {
                FuzzingLab.output("Invalid input: " + e.getMessage());
            }
        }
        return null;
    }

    public void setSequence(String[] trace) {
        sequence = trace;
    }
}

]]></system-out>
  </testcase>
  <testcase name="testSimpleIfShouldCreateTwoMyVars" classname="nl.tudelft.instrumentation.fuzzing.DistanceVisitorTest" time="0.003">
    <system-out><![CDATA[public class Test {

    public static void main(String[] args) {
        if (a <= 0)
            return "INVALID";
    }
}

import nl.tudelft.instrumentation.fuzzing.*;
import nl.tudelft.instrumentation.runner.CallableTraceRunner;

public class Test implements CallableTraceRunner<Void> {

    public static void main(String[] args) {
        DistanceTracker.myIf(DistanceTracker.binaryExpr(DistanceTracker.MyVar(a), DistanceTracker.MyVar(0), "<="), a <= 0, 3);
        if (a <= 0)
            return "INVALID";
    }

    public String[] sequence;

    public Void call() {
        Test cp = new Test();
        for (String s : sequence) {
            try {
                cp.calculateOutput(s);
            } catch (Exception e) {
                FuzzingLab.output("Invalid input: " + e.getMessage());
            }
        }
        return null;
    }

    public void setSequence(String[] trace) {
        sequence = trace;
    }
}

]]></system-out>
  </testcase>
</testsuite>